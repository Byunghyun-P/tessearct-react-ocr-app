{"version":3,"sources":["features/settings/settingsSlice.ts","features/ui/uiSlice.ts","reducers/index.ts","Components/Camera/Controls/styled.ts","Components/Camera/Controls/index.tsx","Components/BottomSheet/Ocr/ProgressInformation/styled.ts","Components/BottomSheet/Ocr/ProgressInformation/index.tsx","Components/BottomSheet/Ocr/Result/styled.ts","Components/BottomSheet/Ocr/Result/OCRImage/styled.ts","Components/BottomSheet/Ocr/Result/OCRImage/index.tsx","Components/BottomSheet/Ocr/Result/index.tsx","Components/BottomSheet/Ocr/index.tsx","Components/BottomSheet/Setting/styled.ts","Components/BottomSheet/Setting/index.tsx","Components/Camera/styled.ts","Components/Camera/index.tsx","App.tsx","index.tsx"],"names":["OEM","PSM","PRESERVE_INTER_WORD_SPACES","LANGUAGE","uiSlice","createSlice","name","initialState","isOcrBottomSheetOpen","isSettingBottomSheetOpen","reducers","setImage","state","action","image","payload","undefined","setIsSettingBottomSheetOpen","actions","getImage","ui","getIsOcrBottomSheetOpen","getIsSettingBottomSheetOpen","tesseditOcrEngineMode","DEFAULT","tesseditPagesegMode","SINGLE_BLOCK","preserveInterwordSpaces","NO","settingsSlice","setDefaultSetting","updateOEM","updatePSM","updatePreserveInterwordSpace","getOEMSetting","settings","getPSMSetting","getPreserveInterwordSpaceSetting","rootReducer","combineReducers","Container","styled","div","Controls","handleOnCapture","dispatch","useDispatch","type","shape","icon","size","onClick","window","open","placement","title","visible","overlayStyle","zIndex","position","StatusText","Progress","Status","status","progress","STATUS","CORE_LOADING","TESSERACT_INITIALIZING","TESSERACT_INITIALIZED","LANG_LOADING","LANG_LOADED","API_INITIALIZING","API_INITIALIZED","TEXT_RECOGNIZING","Math","floor","ProgressInformation","percent","showInfo","OriginalImage","img","ResultImage","ImageCanvas","PANEL_IDS","words","canvasRef","useRef","useState","resultImage","setResultImage","useEffect","canvas","current","ctx","getContext","vImage","Image","src","onload","naturalWidth","naturalHeight","width","height","drawImage","forEach","word","bbox","x0","x1","y0","y1","text","beginPath","lineWidth","strokeStyle","rect","font","fillStyle","fillText","stroke","toDataURL","ref","customPanelStyle","borderRadius","border","overflow","textOverflow","whiteSpace","Panel","Block","blocks","bordered","accordion","map","block","idx","header","key","style","layout","column","Item","label","confidence","Paragraphs","paragraphs","paragraph","Lines","lines","line","Words","language","in_dictionary","is_numeric","is_bold","is_italic","is_underlined","is_monospace","is_serif","is_smallcaps","font_size","font_id","font_name","choices","choice","Result","STAGE","worker","page","defaultActiveKey","OCR_RESULT","ORIGINAL_IMAGE","OCR_IMAGE","OCRImage","OCR_INFORMATION","version","psm","oem","length","symbols","OCR_DETAIL_RESULT","BottomSheet","useSelector","IDLE","setStatus","setProgress","setPage","selectedOEM","selectedPSM","doOCR","useCallback","a","createWorker","logger","load","loadLanguage","initialize","setParameters","tessedit_ocr_engine_mode","tessedit_pageseg_mode","recognize","data","terminate","stage","RESULT","LODING","maskClosable","destroyOnClose","bodyStyle","padding","onClose","ButtonContainer","SettingBottomSheet","isOpen","closable","Group","buttonStyle","defaultValue","onChange","evt","target","value","Button","TESSERACT_ONLY","LSTM_ONLY","TESSERACT_LSTM_COMBINED","OSD_ONLY","AUTO_OSD","AUTO_ONLY","AUTO","SINGLE_COLUMN","SINGLE_BLOCK_VERT_TEXT","SINGLE_LINE","SINGLE_WORD","CIRCLE_WORD","SINGLE_CHAR","SPARSE_TEXT","SPARSE_TEXT_OSD","ErrorContainer","ErrorExtraInformation","WebcamContainer","ImagePreviewContainer","ImagePreview","Camera","webcamRef","createRef","setWidth","setHeight","isMediaDeviceError","setIsMediaDeviceError","webcam","imageSrc","getScreenshot","canUseMediaDevice","navigator","mediaDevices","getUserMedia","video","console","log","document","body","clientHeight","clientWidth","subTitle","Paragraph","Text","userAgent","videoConstraints","facingMode","audio","background","screenshotFormat","forceScreenshotSourceSize","Ocr","Setting","store","configureStore","reducer","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b6722d60.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../reducers\";\n\nexport enum OEM {\n  TESSERACT_ONLY = 0,\n  LSTM_ONLY = 1,\n  TESSERACT_LSTM_COMBINED = 2,\n  DEFAULT = 3\n}\n\nexport enum PSM {\n  OSD_ONLY = \"0\",\n  AUTO_OSD = \"1\",\n  AUTO_ONLY = \"2\",\n  AUTO = \"3\",\n  SINGLE_COLUMN = \"4\",\n  SINGLE_BLOCK_VERT_TEXT = \"5\",\n  SINGLE_BLOCK = \"6\",\n  SINGLE_LINE = \"7\",\n  SINGLE_WORD = \"8\",\n  CIRCLE_WORD = \"9\",\n  SINGLE_CHAR = \"10\",\n  SPARSE_TEXT = \"11\",\n  SPARSE_TEXT_OSD = \"12\"\n}\n\nexport enum PRESERVE_INTER_WORD_SPACES {\n  NO = \"0\",\n  YES = \"1\"\n}\n\nexport enum LANGUAGE {\n  ENG = \"eng\",\n  KOR = \"kor\",\n  JPN = \"jpn\"\n}\n\ninterface settingState {\n  tesseditOcrEngineMode: OEM;\n  tesseditPagesegMode: PSM;\n  preserveInterwordSpaces: PRESERVE_INTER_WORD_SPACES;\n}\n\nconst initialState: settingState = {\n  tesseditOcrEngineMode: OEM.DEFAULT,\n  tesseditPagesegMode: PSM.SINGLE_BLOCK,\n  preserveInterwordSpaces: PRESERVE_INTER_WORD_SPACES.NO\n};\n\nconst settingsSlice = createSlice({\n  name: \"setting\",\n  initialState,\n  reducers: {\n    setDefaultSetting() {\n      return initialState;\n    },\n    updateOEM(state, action) {\n      state.tesseditOcrEngineMode = action.payload;\n    },\n    updatePSM(state, action) {\n      state.tesseditPagesegMode = action.payload;\n    },\n    updatePreserveInterwordSpace(state, action) {\n      state.preserveInterwordSpaces = action.payload;\n    }\n  }\n});\n\nexport const {\n  setDefaultSetting,\n  updateOEM,\n  updatePSM,\n  updatePreserveInterwordSpace\n} = settingsSlice.actions;\n\nexport const getOEMSetting = (state: RootState) =>\n  state.settings.tesseditOcrEngineMode;\nexport const getPSMSetting = (state: RootState) =>\n  state.settings.tesseditPagesegMode;\nexport const getPreserveInterwordSpaceSetting = (state: RootState) =>\n  state.settings.preserveInterwordSpaces;\n\nexport default settingsSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../reducers\";\n\ninterface UiState {\n  image?: string;\n  isOcrBottomSheetOpen: boolean;\n  isSettingBottomSheetOpen: boolean;\n}\n\nconst initialState: UiState = {\n  isOcrBottomSheetOpen: false,\n  isSettingBottomSheetOpen: false\n};\n\nconst uiSlice = createSlice({\n  name: \"ui\",\n  initialState,\n  reducers: {\n    setImage(state, action: PayloadAction<string | undefined>) {\n      state.image = action.payload;\n      state.isOcrBottomSheetOpen = action.payload !== undefined;\n    },\n    setIsSettingBottomSheetOpen(state, action: PayloadAction<boolean>) {\n      state.isSettingBottomSheetOpen = action.payload;\n    }\n  }\n});\n\nexport const { setImage, setIsSettingBottomSheetOpen } = uiSlice.actions;\n\nexport const getImage = (state: RootState) => state.ui.image;\nexport const getIsOcrBottomSheetOpen = (state: RootState) =>\n  state.ui.isOcrBottomSheetOpen;\nexport const getIsSettingBottomSheetOpen = (state: RootState) =>\n  state.ui.isSettingBottomSheetOpen;\n\nexport default uiSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport ui from \"../features/ui/uiSlice\";\nimport settings from \"../features/settings/settingsSlice\";\n\nconst rootReducer = combineReducers({ ui, settings });\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  bottom: 5vh;\n  position: fixed;\n  padding: 0 5vh;\n`;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Tooltip, Button } from \"antd\";\n\nimport { setIsSettingBottomSheetOpen } from \"../../../features/ui/uiSlice\";\nimport { Container } from \"./styled\";\n\ninterface IProps {\n  handleOnCapture: () => void;\n}\n\nfunction Controls({ handleOnCapture }: IProps) {\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Button\n        type=\"default\"\n        shape=\"circle\"\n        icon=\"github\"\n        size=\"large\"\n        onClick={() => {\n          window.open(\n            \"https://github.com/Byunghyun-P/tessearct-react-ocr-app\",\n            \"_blank\",\n            'noopener'\n          );\n        }}\n      />\n      <Tooltip\n        placement=\"top\"\n        title=\"사진을 찍으면 문자를 인식합니다!\"\n        visible\n        overlayStyle={{\n          zIndex: 1,\n          position: \"fixed\"\n        }}\n      >\n        <Button\n          type=\"default\"\n          shape=\"round\"\n          icon=\"camera\"\n          size=\"large\"\n          onClick={handleOnCapture}\n        />\n      </Tooltip>\n      <Button\n        icon=\"setting\"\n        shape=\"circle\"\n        size=\"large\"\n        onClick={() => {\n          dispatch(setIsSettingBottomSheetOpen(true));\n        }}\n      />\n    </Container>\n  );\n}\n\nexport default Controls;\n","import styled from \"styled-components\";\nimport { Progress as OrigProgress } from \"antd\";\n\nexport const Container = styled.div`\n  padding: 1rem 0;\n`;\n\nexport const StatusText = styled.div`\n  text-align: center;\n`;\n\nexport const Progress = styled(OrigProgress)`\n  padding: 0 2rem;\n`;\n","import React from \"react\";\n\nimport { STATUS } from \"../index\";\n\nimport { Container, StatusText, Progress } from \"./styled\";\n\ninterface IStatusProps {\n  status: STATUS;\n  progress: number;\n}\n\nfunction Status({ status, progress }: IStatusProps) {\n  return (\n    <StatusText>\n      {status === STATUS.CORE_LOADING\n        ? \"[0/4] Tesseract 코어를 불러오고 있습니다\"\n        : status === STATUS.TESSERACT_INITIALIZING\n        ? \"[1/4] Tesseract를 초기화 하고 있습니다\"\n        : status === STATUS.TESSERACT_INITIALIZED\n        ? \"[2/4] Tesseract가 초기화 되었습니다\"\n        : status === STATUS.LANG_LOADING\n        ? \"[2/4] 언어 학습 정보를 불러오고 있습니다\"\n        : status === STATUS.LANG_LOADED\n        ? \"[3/4] 언어 학습 정보를 모두 불러왔습니다\"\n        : status === STATUS.API_INITIALIZING\n        ? \"[3/4] API를 초기화하고 있습니다\"\n        : status === STATUS.API_INITIALIZED\n        ? \"[4/4] API가 초기화 되었습니다\"\n        : status === STATUS.TEXT_RECOGNIZING\n        ? \"[4/4] 문자를 인식중입니다\"\n        : status}{\" \"}\n      ({Math.floor(progress * 100)}%)\n    </StatusText>\n  );\n}\n\ninterface IProps {\n  status: STATUS;\n  progress: number;\n}\n\nfunction ProgressInformation({ status, progress }: IProps) {\n  return (\n    <Container>\n      <Status status={status} progress={progress} />\n      <Progress\n        percent={Math.floor(\n          status === STATUS.TEXT_RECOGNIZING ? progress * 100 : 0\n        )}\n        status=\"active\"\n        showInfo={false}\n      />\n    </Container>\n  );\n}\n\nexport default ProgressInformation;\n","import styled from \"styled-components\";\n\nexport const OriginalImage = styled.img`\n  width: 100%;\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  width: 100%;\n  overflow: scroll;\n`;\n\nexport const ResultImage = styled.img`\n  width: 100%;\n`;\n","import React, { useRef, useEffect, useState } from \"react\";\n\nimport { Container, ResultImage } from \"./styled\";\n\ninterface IProps {\n  image: string;\n  words: Tesseract.Word[];\n}\n\nfunction ImageCanvas({ image, words }: IProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [resultImage, setResultImage] = useState<string>();\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        const vImage = new Image();\n        vImage.src = image;\n        vImage.onload = () => {\n          const { naturalWidth, naturalHeight } = vImage;\n          ctx.canvas.width = naturalWidth;\n          ctx.canvas.height = naturalHeight;\n          ctx.drawImage(vImage, 0, 0, naturalWidth, naturalHeight);\n          words.forEach(word => {\n            const {\n              bbox: { x0, x1, y0, y1 },\n              text\n            } = word;\n\n            ctx.beginPath();\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = \"red\";\n            ctx.rect(x0, y0, x1 - x0, y1 - y0);\n\n            ctx.font = \"15px Arial\";\n            ctx.fillStyle = \"red\";\n            ctx.fillText(text, x0, y0);\n            ctx.stroke();\n          });\n          setResultImage(canvas.toDataURL());\n        };\n      }\n    }\n  }, [canvasRef]);\n\n  return (\n    <Container>\n      {resultImage ? (\n        <ResultImage src={resultImage} />\n      ) : (\n        <canvas ref={canvasRef} />\n      )}\n    </Container>\n  );\n}\n\nexport default ImageCanvas;\n","import React from \"react\";\n\nimport { OriginalImage } from \"./styled\";\nimport { Collapse, Descriptions } from \"antd\";\n\nimport OCRImage from \"./OCRImage\";\n\nconst customPanelStyle: React.CSSProperties = {\n  borderRadius: 4,\n  border: 1,\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\",\n  whiteSpace: \"nowrap\"\n};\n\nconst { Panel } = Collapse;\n\nfunction Block({ blocks }: { blocks: Tesseract.Block[] }) {\n  return (\n    <Collapse bordered={false} accordion>\n      {blocks.map((block: Tesseract.Block, idx: number) => (\n        <Panel\n          header={`(${idx + 1}번째 Block) ${block.text}`}\n          key={`${idx}`}\n          style={customPanelStyle}\n        >\n          <Descriptions bordered layout=\"vertical\" column={1} size=\"small\">\n            <Descriptions.Item label=\"텍스트\">{block.text}</Descriptions.Item>\n            <Descriptions.Item label=\"Confidence\">\n              {block.confidence}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"paragraphs\">\n              <Paragraphs\n                paragraphs={\n                  (block.paragraphs as unknown) as Tesseract.Paragraph[]\n                }\n              />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n      ))}\n    </Collapse>\n  );\n}\n\nfunction Paragraphs({ paragraphs }: { paragraphs: Tesseract.Paragraph[] }) {\n  return (\n    <Collapse bordered={false} accordion>\n      {paragraphs.map((paragraph, idx: number) => (\n        <Panel\n          header={`(${idx + 1}번째 Paragraph) ${paragraph.text}`}\n          key={`${idx}`}\n          style={customPanelStyle}\n        >\n          <Descriptions bordered layout=\"vertical\" column={1} size=\"small\">\n            <Descriptions.Item label=\"Text\">{paragraph.text}</Descriptions.Item>\n            <Descriptions.Item label=\"Confidence\">\n              {paragraph.confidence}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Lines\">\n              <Lines lines={paragraph.lines} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n      ))}\n    </Collapse>\n  );\n}\n\nfunction Lines({ lines }: { lines: Tesseract.Line[] }) {\n  return (\n    <Collapse bordered={false} accordion>\n      {lines.map((line, idx: number) => (\n        <Panel\n          header={`(${idx + 1}번째 Line) ${line.text}`}\n          key={`line_${idx}`}\n          style={customPanelStyle}\n        >\n          <Descriptions bordered layout=\"vertical\" column={1} size=\"small\">\n            <Descriptions.Item label=\"Text\">{line.text}</Descriptions.Item>\n            <Descriptions.Item label=\"Confidence\">\n              {line.confidence}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Words\">\n              <Words words={line.words} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n      ))}\n    </Collapse>\n  );\n}\n\nfunction Words({ words }: { words: Tesseract.Word[] }) {\n  return (\n    <Collapse bordered={false}>\n      {words.map((word, idx: number) => (\n        <Panel\n          header={`(${idx + 1}번째 Word) ${word.text}`}\n          key={`word_${idx}`}\n          style={customPanelStyle}\n        >\n          <Descriptions bordered layout=\"vertical\" column={1} size=\"small\">\n            <Descriptions.Item label=\"Text\">{word.text}</Descriptions.Item>\n            <Descriptions.Item label=\"Confidence\">\n              {word.confidence}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"정보\">\n              <Descriptions bordered layout=\"vertical\" column={1}>\n                <Descriptions.Item label=\"language\">\n                  {word.language}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"in_dictionary\">\n                  {`${word.in_dictionary}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"is_numeric\">\n                  {`${word.is_numeric}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"is_bold\">\n                  {`${word.is_bold}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"is_italic\">\n                  {`${word.is_italic}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"is_underlined\">\n                  {`${word.is_underlined}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"is_monospace\">\n                  {`${word.is_monospace}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"is_serif\">\n                  {`${word.is_serif}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"is_smallcaps\">\n                  {`${word.is_smallcaps}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"font_size\">\n                  {`${word.font_size}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"font_id\">\n                  {`${word.font_id}`}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"font_name\">\n                  {`${word.font_name}`}\n                </Descriptions.Item>\n              </Descriptions>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Choices\">\n              {word.choices.map(choice => (\n                <Descriptions key={choice.text} layout=\"vertical\" column={1}>\n                  <Descriptions.Item label={choice.text}>\n                    {choice.confidence}\n                  </Descriptions.Item>\n                </Descriptions>\n              ))}\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n      ))}\n    </Collapse>\n  );\n}\n\nenum PANEL_IDS {\n  ORIGINAL_IMAGE = \"original_image\",\n  OCR_IMAGE = \"ocr_image\",\n  OCR_RESULT = \"ocr_result\",\n  OCR_INFORMATION = \"ocr_information\",\n  OCR_DETAIL_RESULT = \"ocr_detaul_result\"\n}\n\ninterface IProps {\n  page?: Tesseract.Page;\n  image: string;\n}\n\nfunction Result({ page, image }: IProps) {\n  if (page == null) {\n    return null;\n  }\n  return (\n    <div>\n      <Collapse bordered={false} defaultActiveKey={[PANEL_IDS.OCR_RESULT]}>\n        <Panel header=\"인식 결과\" key={PANEL_IDS.OCR_RESULT}>\n          {page.text}\n        </Panel>\n        <Panel header=\"원본 이미지\" key={PANEL_IDS.ORIGINAL_IMAGE}>\n          <OriginalImage src={image} />\n        </Panel>\n        <Panel header=\"OCR 이미지\" key={PANEL_IDS.OCR_IMAGE}>\n          <OCRImage image={image} words={page.words} />\n        </Panel>\n        <Panel header=\"인식 정보\" key={PANEL_IDS.OCR_INFORMATION}>\n          <Descriptions bordered>\n            <Descriptions.Item label=\"Tesseract 버전\">\n              {page.version}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"PSM\">{page.psm}</Descriptions.Item>\n            <Descriptions.Item label=\"OEM\">{page.oem}</Descriptions.Item>\n            <Descriptions.Item label=\"Block 갯수\">\n              {page.blocks.length}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Paragraph 갯수\">\n              {page.paragraphs.length}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Line 갯수\">\n              {page.lines.length}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Word 갯수\">\n              {page.words.length}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Symbol 갯수\">\n              {page.symbols.length}\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n        <Panel header=\"결과 분석\" key={PANEL_IDS.OCR_DETAIL_RESULT}>\n          <Block blocks={page.blocks} />\n        </Panel>\n      </Collapse>\n    </div>\n  );\n}\n\nexport default Result;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Drawer } from \"antd\";\n\nimport { createWorker } from \"tesseract.js\";\n\nimport {\n  getOEMSetting,\n  getPSMSetting\n} from \"../../../features/settings/settingsSlice\";\nimport {\n  getImage,\n  getIsOcrBottomSheetOpen,\n  setImage,\n  setIsSettingBottomSheetOpen\n} from \"../../../features/ui/uiSlice\";\n\nimport ProgressInformation from \"./ProgressInformation\";\nimport Result from \"./Result\";\n\nexport enum STATUS {\n  IDLE = \"\",\n  CORE_LOADING = \"loading tesseract core\",\n  TESSERACT_INITIALIZING = \"initializing tesseract\",\n  TESSERACT_INITIALIZED = \"initialized tesseract\",\n  LANG_LOADING = \"loading language traineddata\",\n  LANG_LOADED = \"loaded language traineddata\",\n  API_INITIALIZING = \"initializing api\",\n  API_INITIALIZED = \"initialized api\",\n  TEXT_RECOGNIZING = \"recognizing text\"\n}\n\nenum STAGE {\n  LODING = \"loading\",\n  RESULT = \"result\"\n}\n\nlet worker: Tesseract.Worker | undefined;\n\nfunction BottomSheet({}) {\n  const dispatch = useDispatch();\n\n  const image = useSelector(getImage);\n  const isOcrBottomSheetOpen = useSelector(getIsOcrBottomSheetOpen);\n\n  const [status, setStatus] = useState<STATUS>(STATUS.IDLE);\n  const [progress, setProgress] = useState<number>(0);\n\n  const [page, setPage] = useState<Tesseract.Page>();\n\n  const selectedOEM = (useSelector(getOEMSetting) as unknown) as Tesseract.OEM;\n  const selectedPSM = (useSelector(getPSMSetting) as unknown) as Tesseract.PSM;\n\n  const doOCR = useCallback(async () => {\n    if (image) {\n      worker = createWorker({\n        logger: ({\n          status,\n          progress\n        }: {\n          status: STATUS;\n          progress: number;\n        }) => {\n          setProgress(progress);\n          setStatus(status);\n        }\n      });\n      await worker.load();\n      await worker.loadLanguage(\"eng+kor\");\n      await worker.initialize(\"eng+kor\");\n      await worker.setParameters({\n        tessedit_ocr_engine_mode: selectedOEM,\n        tessedit_pageseg_mode: selectedPSM\n        /** TODO: Add preserve_interword_spaces options */\n        // preserve_interword_spaces: selectedPreserveInterwordSpace\n      });\n      const { data } = await worker.recognize(image);\n      setPage(data);\n      await worker.terminate();\n      worker = undefined;\n    }\n  }, [image]);\n\n  useEffect(() => {\n    doOCR();\n  }, [image]);\n\n  useEffect(() => {\n    if (!isOcrBottomSheetOpen && worker) {\n      worker.terminate();\n    }\n  }, [isOcrBottomSheetOpen]);\n\n  const stage =\n    status === STATUS.TEXT_RECOGNIZING && progress === 1\n      ? STAGE.RESULT\n      : STAGE.LODING;\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <Drawer\n      title={stage === STAGE.LODING ? \"분석중\" : \"결과\"}\n      placement=\"bottom\"\n      visible={isOcrBottomSheetOpen}\n      maskClosable={false}\n      destroyOnClose={true}\n      height={stage === STAGE.LODING ? \"130px\" : \"100%\"}\n      bodyStyle={{ padding: 0 }}\n      onClose={() => {\n        dispatch(setImage(undefined));\n        dispatch(setIsSettingBottomSheetOpen(false));\n      }}\n    >\n      {stage === STAGE.LODING ? (\n        <ProgressInformation progress={progress} status={status} />\n      ) : (\n        <Result page={page} image={image} />\n      )}\n    </Drawer>\n  );\n}\n\nexport default BottomSheet;\n","import styled from \"styled-components\";\n\nexport const ButtonContainer = styled.div`\n  margin: 0.5rem 0;\n  display: flex;\n  justify-content: flex-end;\n`;\n","import React, { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { Collapse, Drawer, Descriptions, Radio, Button } from \"antd\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\n\nimport {\n  OEM,\n  PSM,\n  getOEMSetting,\n  getPSMSetting,\n  getPreserveInterwordSpaceSetting,\n  updateOEM,\n  updatePSM,\n  setDefaultSetting\n} from \"../../../features/settings/settingsSlice\";\nimport {\n  setIsSettingBottomSheetOpen,\n  getIsSettingBottomSheetOpen\n} from \"../../../features/ui/uiSlice\";\n\nimport { ButtonContainer } from \"./styled\";\n\nconst { Panel } = Collapse;\n\nfunction SettingBottomSheet({}) {\n  const dispatch = useDispatch();\n\n  const isOpen = useSelector(getIsSettingBottomSheetOpen);\n\n  const selectedOEM = useSelector(getOEMSetting);\n  const selectedPSM = useSelector(getPSMSetting);\n  const selectedPreserveInterwordSpace = useSelector(\n    getPreserveInterwordSpaceSetting\n  );\n\n  const onClose = useCallback(() => {\n    dispatch(setIsSettingBottomSheetOpen(false));\n  }, []);\n\n  return (\n    <Drawer\n      title={\"설정\"}\n      placement=\"bottom\"\n      visible={isOpen}\n      closable={true}\n      destroyOnClose\n      height={\"60%\"}\n      bodyStyle={{ height: \"100%\", padding: \"5px\" }}\n      onClose={onClose}\n    >\n      <Descriptions\n        title=\"\"\n        column={1}\n        bordered\n        layout={\"vertical\"}\n        size=\"small\"\n      >\n        <Descriptions.Item label=\"OCR Engine Mode\">\n          <Radio.Group\n            buttonStyle=\"solid\"\n            size=\"small\"\n            defaultValue={selectedOEM}\n            onChange={(evt: RadioChangeEvent) => {\n              dispatch(updateOEM(evt.target.value));\n            }}\n          >\n            <Radio.Button value={OEM.TESSERACT_ONLY}>\n              TESSERACT_ONLY\n            </Radio.Button>\n            <Radio.Button value={OEM.LSTM_ONLY}>LSTM_ONLY</Radio.Button>\n            <Radio.Button value={OEM.TESSERACT_LSTM_COMBINED}>\n              TESSERACT_LSTM_COMBINED\n            </Radio.Button>\n            <Radio.Button value={OEM.DEFAULT}>DEFAULT</Radio.Button>\n          </Radio.Group>\n          <Collapse bordered={false}>\n            <Panel header=\"설명\" key=\"Description\">\n              <h5>\n                When Tesseract/Cube is initialized we can choose to\n                instantiate/load/run only the Tesseract part, only the Cube part\n                or both along with the combiner. The preference of which engine\n                to use is stored in tessedit_ocr_engine_mode.\n              </h5>\n              <hr />\n              <b> OEM_TESSERACT_ONLY </b> <br />\n              <p>Run Tesseract only - fastest; deprecated</p>\n              <hr />\n              <b> OEM_LSTM_ONLY </b>\n              <p>Run just the LSTM line recognizer. </p>\n              <hr />\n              <b> OEM_TESSERACT_LSTM_COMBINED </b>\n              <p>\n                Run the LSTM recognizer, but allow fallback to Tesseract when\n                things get difficult.; deprecated\n              </p>\n              <hr />\n              <b> OEM_DEFAULT </b>\n              <p>\n                Specify this mode when calling init_*(), to indicate that any of\n                the above modes should be automatically inferred from the\n                variables in the language-specific config, command-line configs,\n                or if not specified in any of the above should be set to the\n              </p>\n            </Panel>\n          </Collapse>\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Page Seg Mode\">\n          <Radio.Group\n            buttonStyle=\"solid\"\n            size=\"small\"\n            defaultValue={selectedPSM}\n            onChange={(evt: RadioChangeEvent) => {\n              dispatch(updatePSM(evt.target.value));\n            }}\n          >\n            <Radio.Button value={PSM.OSD_ONLY}>OSD_ONLY</Radio.Button>\n            <Radio.Button value={PSM.AUTO_OSD}>AUTO_OSD</Radio.Button>\n            <Radio.Button value={PSM.AUTO_ONLY}>AUTO_ONLY</Radio.Button>\n            <Radio.Button value={PSM.AUTO}>AUTO</Radio.Button>\n            <Radio.Button value={PSM.SINGLE_COLUMN}>SINGLE_COLUMN</Radio.Button>\n            <Radio.Button value={PSM.SINGLE_BLOCK_VERT_TEXT}>\n              SINGLE_BLOCK_VERT_TEXT\n            </Radio.Button>\n            <Radio.Button value={PSM.SINGLE_BLOCK}>SINGLE_BLOCK</Radio.Button>\n            <Radio.Button value={PSM.SINGLE_LINE}>SINGLE_LINE</Radio.Button>\n            <Radio.Button value={PSM.SINGLE_WORD}>SINGLE_WORD</Radio.Button>\n            <Radio.Button value={PSM.CIRCLE_WORD}>CIRCLE_WORD</Radio.Button>\n            <Radio.Button value={PSM.SINGLE_CHAR}>SINGLE_CHAR</Radio.Button>\n            <Radio.Button value={PSM.SPARSE_TEXT}>SPARSE_TEXT</Radio.Button>\n            <Radio.Button value={PSM.SPARSE_TEXT_OSD}>\n              SPARSE_TEXT_OSD\n            </Radio.Button>\n          </Radio.Group>\n\n          <Collapse bordered={false}>\n            <Panel header=\"설명\" key=\"Description\">\n              <h5>\n                Possible modes for page layout analysis. These *must* be kept in\n                order of decreasing amount of layout analysis to be done, except\n                for OSD_ONLY, so that the inequality test macros below work.\n              </h5>\n              <b> PSM_OSD_ONLY </b>\n              <p>Orientation and script detection only.</p>\n              <hr />\n              <b>PSM_AUTO_OSD </b>\n              <p>\n                Automatic page segmentation with orientation and script\n                detection. (OSD)\n              </p>\n              <hr />\n              <b>PSM_AUTO_ONLY </b>\n              <p> Automatic page segmentation, but no OSD, or OCR. </p>\n              <hr />\n              <b>PSM_AUTO </b>\n              <p> Fully automatic page segmentation, but no OSD. </p>\n              <hr />\n              <b>PSM_SINGLE_COLUMN </b>\n              <p> Assume a single column of text of variable sizes. </p>\n              <hr />\n              <b>PSM_SINGLE_BLOCK_VERT_TEXT </b>\n              <p> Assume a single uniform block of vertically aligned text. </p>\n              <hr />\n              <b>PSM_SINGLE_BLOCK </b>\n              <p> Assume a single uniform block of text. (Default.) </p>\n              <hr />\n              <b>PSM_SINGLE_LINE </b>\n              <p> Treat the image as a single text line. </p>\n              <hr />\n              <b>PSM_SINGLE_WORD </b>\n              <p> Treat the image as a single word. </p>\n              <hr />\n              <b>PSM_CIRCLE_WORD </b>\n              <p> Treat the image as a single word in a circle. </p>\n              <hr />\n              <b>PSM_SINGLE_CHAR </b>\n              <p> Treat the image as a single character. </p>\n              <hr />\n              <b>PSM_SPARSE_TEXT </b>\n              <p> Find as much text as possible in no particular order. </p>\n              <hr />\n              <b>PSM_SPARSE_TEXT_OSD </b>\n              <p> Sparse text with orientation and script det. </p>\n              <hr />\n              <b>PSM_RAW_LINE </b>\n              <p>\n                Treat the image as a single text line, bypassing hacks that are\n                Tesseract-specific.\n              </p>\n              <hr />\n              <b>PSM_COUNT </b>\n              <p> Number of enum entries. </p>\n            </Panel>\n          </Collapse>\n        </Descriptions.Item>\n        {/* TODO: Support Preserve Interword Spaces option */}\n        {/* \n          <Descriptions.Item label=\"Preserve Interword Spaces\">\n            <Radio.Group\n              buttonStyle=\"solid\"\n              size=\"small\"\n              defaultValue={selectedPreserveInterwordSpace}\n              onChange={(evt: RadioChangeEvent) => {\n                dispatch(updatePreserveInterwordSpace(evt.target.value));\n              }}\n            >\n              <Radio.Button value={PRESERVE_INTER_WORD_SPACES.NO}>\n                NO\n              </Radio.Button>\n              <Radio.Button value={PRESERVE_INTER_WORD_SPACES.YES}>\n                YES\n              </Radio.Button>\n            </Radio.Group>\n          </Descriptions.Item> \n        */}\n      </Descriptions>\n      <ButtonContainer>\n        <Button\n          type=\"danger\"\n          onClick={() => {\n            dispatch(setDefaultSetting());\n            onClose();\n          }}\n        >\n          초기화\n        </Button>\n        <Button onClick={onClose}>닫기</Button>\n      </ButtonContainer>\n    </Drawer>\n  );\n}\n\nexport default SettingBottomSheet;\n","import styled from \"styled-components\";\n\nexport const ErrorContainer = styled.div`\n  height: -webkit-fill-available;\n  height: 100vh;\n  width: 100vw;\n  background: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const ErrorExtraInformation = styled.div`\n  padding: 0 20px;\n  text-align: center;\n`;\n\nexport const WebcamContainer = styled.div`\n  position: fixed;\n  height: -webkit-fill-available;\n  height: 100vh;\n  width: 100vw;\n`;\n\nexport const ImagePreviewContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: -webkit-fill-available;\n  height: 100vh;\n  width: 100vw;\n`;\n\nexport const ImagePreview = styled.img`\n  width: 100%;\n`;\n","import React, { createRef, useCallback, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Webcam from \"react-webcam\";\nimport { Result, Typography } from \"antd\";\n\nimport { setImage, getImage } from \"../../features/ui/uiSlice\";\n\nimport Buttons from \"./Controls\";\nimport OcrBottomSheet from \"../BottomSheet/Ocr\";\nimport SettingBottomSheet from \"../BottomSheet/Setting\";\n\nimport {\n  ErrorContainer,\n  ErrorExtraInformation,\n  WebcamContainer,\n  ImagePreviewContainer,\n  ImagePreview\n} from \"./styled\";\n\nfunction Camera({}) {\n  const webcamRef = createRef<any>();\n\n  const dispatch = useDispatch();\n  const image = useSelector(getImage);\n\n  const [width, setWidth] = useState<number>();\n  const [height, setHeight] = useState<number>();\n  const [isMediaDeviceError, setIsMediaDeviceError] = useState<boolean>();\n\n  const handleOnCapture = useCallback(() => {\n    const { current: webcam } = webcamRef;\n    if (webcam) {\n      const imageSrc = webcam.getScreenshot();\n      dispatch(setImage(imageSrc));\n    }\n  }, [webcamRef]);\n\n  const canUseMediaDevice = useCallback(async () => {\n    try {\n      await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      setIsMediaDeviceError(false);\n    } catch (e) {\n      console.log(e);\n      setIsMediaDeviceError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    setHeight(document.body.clientHeight);\n    setWidth(document.body.clientWidth);\n\n    canUseMediaDevice();\n  }, []);\n\n  if (isMediaDeviceError === undefined) {\n    return null;\n  }\n\n  if (isMediaDeviceError) {\n    return (\n      <ErrorContainer>\n        <Result\n          status=\"error\"\n          title=\"카메라 인식 실패\"\n          subTitle=\"카메라 사용 가능 여부 및 권한을 확인해주세요\"\n        />\n        <ErrorExtraInformation>\n          <Typography.Paragraph>\n            <Typography.Text>\n              카카오톡 인앱 브라우져로 접속하셨다면, Safari / Chrome 등으로\n              실행해주세요.\n            </Typography.Text>\n          </Typography.Paragraph>\n          <Typography.Paragraph>\n            <Typography.Text> {window.navigator.userAgent} </Typography.Text>\n          </Typography.Paragraph>\n        </ErrorExtraInformation>\n      </ErrorContainer>\n    );\n  }\n\n  return (\n    <>\n      {!image ? (\n        <WebcamContainer>\n          <Webcam\n            ref={webcamRef}\n            height={height}\n            width={width}\n            videoConstraints={{\n              facingMode: \"environment\",\n              width,\n              height\n            }}\n            audio={false}\n            style={{ background: \"#333\" }}\n            screenshotFormat=\"image/jpeg\"\n            forceScreenshotSourceSize\n          />\n          <Buttons handleOnCapture={handleOnCapture} />\n        </WebcamContainer>\n      ) : (\n        <ImagePreviewContainer>\n          <ImagePreview src={image} />\n        </ImagePreviewContainer>\n      )}\n      <OcrBottomSheet />\n      <SettingBottomSheet />\n    </>\n  );\n}\n\nexport default Camera;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nimport reducer from \"./reducers\";\n\nimport Camera from \"./Components/Camera\";\n\nimport \"./App.css\";\n\nconst store = configureStore({ reducer });\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Camera />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}